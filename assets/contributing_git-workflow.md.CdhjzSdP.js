import{_ as i,i as a,o as t,an as e}from"./chunks/framework.U8Tw7yRc.js";const g=JSON.parse('{"title":"Git 工作流与提交规范","description":"了解 Dora Pocket 项目的代码提交工作流，包括如何同步、创建分支、使用 Changesets 以及发起 Pull Request 的完整流程。","frontmatter":{"title":"Git 工作流与提交规范","description":"了解 Dora Pocket 项目的代码提交工作流，包括如何同步、创建分支、使用 Changesets 以及发起 Pull Request 的完整流程。"},"headers":[],"relativePath":"contributing/git-workflow.md","filePath":"contributing/git-workflow.md","lastUpdated":1755137800000}'),n={name:"contributing/git-workflow.md"};function l(h,s,r,o,k,d){return t(),a("div",null,[...s[0]||(s[0]=[e(`<h1 id="git-工作流与提交规范" tabindex="-1">Git 工作流与提交规范 <a class="header-anchor" href="#git-工作流与提交规范" aria-label="Permalink to “Git 工作流与提交规范”">​</a></h1><p>本指南详细介绍了 <code>Dora Pocket</code> 项目的日常开发流程和 Git 使用规范。我们致力于维护一个清晰、可追溯且高质量的 Git 历史，这需要每位贡献者的共同努力。</p><h2 id="日常开发流程" tabindex="-1">日常开发流程 <a class="header-anchor" href="#日常开发流程" aria-label="Permalink to “日常开发流程”">​</a></h2><ol><li><p><strong>同步最新代码</strong> 在开始任何新工作前，<strong>务必</strong>先拉取上游主仓库的最新代码。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> main</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pull</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> upstream</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> main</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --ff-only</span></span></code></pre></div></li><li><p><strong>创建功能分支</strong> 从最新的 <code>main</code> 分支上，创建一个描述清晰的新分支。分支名应遵循约定（如 <code>feat/add-new-function</code>, <code>fix/docs-typo</code>）。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -b</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> feat/add-new-function</span></span></code></pre></div></li><li><p><strong>编码与测试</strong> 在新分支上进行编码和测试。关于如何编写测试，请参考 <a href="./testing-guide">测试指南</a>。</p></li><li><p><strong>提交 Pull Request (PR)</strong> 将你的功能分支推送到你的 Fork 仓库，然后在 GitHub 上创建 PR。请确保 PR 标题遵循 <strong>Conventional Commit</strong> 规范（例如 <code>feat(kit): add deepClone function</code>）。</p></li></ol><hr><h2 id="常见工作流问答-faq" tabindex="-1">常见工作流问答 (FAQ) <a class="header-anchor" href="#常见工作流问答-faq" aria-label="Permalink to “常见工作流问答 (FAQ)”">​</a></h2><h3 id="q1-我的-pr-存在合并冲突-怎么办" tabindex="-1">Q1: 我的 PR 存在合并冲突，怎么办？ <a class="header-anchor" href="#q1-我的-pr-存在合并冲突-怎么办" aria-label="Permalink to “Q1: 我的 PR 存在合并冲突，怎么办？”">​</a></h3><p><strong>现象:</strong> PR 页面提示 &quot;This branch has conflicts that must be resolved&quot;。</p><p><strong>解决方法 (使用 <code>rebase</code>):</strong></p><ol><li><strong>获取最新的 <code>main</code> 分支代码：</strong><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> main</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pull</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> upstream</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> main</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --ff-only</span></span></code></pre></div></li><li><strong>切换回你的功能分支，并执行 Rebase：</strong><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> feat/add-new-function</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> rebase</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> main</span></span></code></pre></div></li><li><strong>手动解决冲突 (如果发生):</strong><ul><li>打开冲突文件，手动编辑，保留最终想要的代码。</li><li>解决完一个文件后，运行 <code>git add &lt;filename&gt;</code>。</li><li>当所有冲突都解决后，运行 <code>git rebase --continue</code>。</li></ul></li><li><strong>强制推送到你的 Fork 以更新 PR：</strong><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> push</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --force-with-lease</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> origin</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> feat/add-new-function</span></span></code></pre></div></li></ol><h3 id="q2-我已经提交了-pr-但想再做一些小的修改-该怎么办" tabindex="-1">Q2: 我已经提交了 PR，但想再做一些小的修改，该怎么办？ <a class="header-anchor" href="#q2-我已经提交了-pr-但想再做一些小的修改-该怎么办" aria-label="Permalink to “Q2: 我已经提交了 PR，但想再做一些小的修改，该怎么办？”">​</a></h3><p><strong>很简单！</strong> 你不需要创建一个新的 PR。</p><ol><li>在你本地的同一个功能分支上，继续进行修改。</li><li>像平常一样提交你的新改动：<code>git add .</code> -&gt; <code>git commit -m &quot;feat: add more details&quot;</code>。</li><li>再次推送到你的 Fork：<code>git push</code>。</li></ol><p>GitHub 会自动将你的新提交添加到现有的 Pull Request 中。</p><h3 id="q3-我不小心在-main-分支上直接写了代码并提交了-怎么办" tabindex="-1">Q3: 我不小心在 <code>main</code> 分支上直接写了代码并提交了，怎么办？ <a class="header-anchor" href="#q3-我不小心在-main-分支上直接写了代码并提交了-怎么办" aria-label="Permalink to “Q3: 我不小心在 main 分支上直接写了代码并提交了，怎么办？”">​</a></h3><blockquote><p>目前已添加hooks限制，正常情况下在main分支上是不允许提交的。</p></blockquote><p><strong>别慌，这是一个常见的错误！</strong> 按照以下“四步救援法”操作：</p><ol><li><strong>创建新分支来保存你的工作：</strong><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 确保在 main 分支上</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> main</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 基于当前 main 创建新分支，你的提交就被“搬”过去了</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -b</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> my-rescued-branch</span></span></code></pre></div></li><li><strong>重置你本地的 <code>main</code> 分支：</strong><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> main</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> fetch</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> upstream</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 硬重置！这将丢弃你本地 main 上的错误提交，并强制与官方 main 保持一致。</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> reset</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --hard</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> upstream/main</span></span></code></pre></div></li><li><strong>更新你“救援”出来的分支：</strong><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> my-rescued-branch</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> rebase</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> main</span></span></code></pre></div></li><li><strong>现在，你可以正常推送这个被救援的分支并创建 PR 了。</strong></li></ol><h3 id="q4-我的功能分支开发了很久-在提交pr前是否需要与-main-同步" tabindex="-1">Q4: 我的功能分支开发了很久，在提交PR前是否需要与 <code>main</code> 同步？ <a class="header-anchor" href="#q4-我的功能分支开发了很久-在提交pr前是否需要与-main-同步" aria-label="Permalink to “Q4: 我的功能分支开发了很久，在提交PR前是否需要与 main 同步？”">​</a></h3><p><strong>回答：是的，这不仅是需要，而且是一个必须执行的最佳实践。</strong></p><p><strong>为什么必须这样做？</strong></p><ul><li><strong>尽早发现并解决冲突：</strong> 在自己的本地环境提前解决冲突，远比在 PR 页面上看到一堆冲突更高效、更专业。</li><li><strong>确保功能兼容：</strong> <code>main</code> 分支上的新代码可能已经改变了你所依赖的函数。提前同步并测试，可以确保你的新功能在当前的代码库中能正常工作。</li><li><strong>简化代码审查：</strong> 审查者可以确信他们审查的代码是基于最新版本的，这为所有人节省了时间。</li></ul><p><strong>操作方法：</strong> 这个流程与解决冲突的流程完全相同，请参考 <strong>Q1</strong> 中的 <code>rebase</code> 步骤，将你的分支更新到最新的 <code>main</code> 分支之上。</p><p><strong>建议频率：</strong> 对于开发超过一天的分支，<strong>建议每天开始工作前都同步一次</strong>，以避免在最后阶段面对难以解决的巨大冲突。</p><h3 id="q5-我可以用-git-merge-来同步-main-分支以避免强制推送吗" tabindex="-1">Q5: 我可以用 <code>git merge</code> 来同步 <code>main</code> 分支以避免强制推送吗？ <a class="header-anchor" href="#q5-我可以用-git-merge-来同步-main-分支以避免强制推送吗" aria-label="Permalink to “Q5: 我可以用 git merge 来同步 main 分支以避免强制推送吗？”">​</a></h3><p><strong>回答：</strong> 技术上可以，但我们<strong>强烈不推荐</strong>。</p><p>使用 <code>git merge</code> 会在你的功能分支中产生许多不必要的“合并提交”（例如 <code>Merge branch &#39;main&#39; into ...</code>），这会严重污染 Pull Request 的历史记录，给代码审查带来巨大困难。</p><p>我们采用 <code>rebase</code> 方案的核心目的，就是为了保持一个线性的、清晰的提交历史，这与项目最终 <code>Squash and Merge</code> 的目标完全一致。虽然 <code>rebase</code> 需要使用 <code>--force-with-lease</code>，但请放心，这仅限于你自己的功能分支，是完全安全且标准的操作。</p><p><strong>请始终使用 <code>rebase</code> 来同步你的分支，以保证协作的高效和历史的纯净。</strong></p><hr><p>再次感谢你的贡献！期待在 <code>Dora Pocket</code> 看到你的身影！</p>`,31)])])}const c=i(n,[["render",l]]);export{g as __pageData,c as default};

import{_ as i,i as a,o as n,an as l}from"./chunks/framework.CCWC7B3L.js";const c=JSON.parse('{"title":"toOklchString","description":"toOklchString - 来自 Dora Pocket 的颜色“道具”，用于将任意颜色格式转换为 OKLCH 字符串。","frontmatter":{"title":"toOklchString","description":"toOklchString - 来自 Dora Pocket 的颜色“道具”，用于将任意颜色格式转换为 OKLCH 字符串。"},"headers":[],"relativePath":"packages/color/reference/conversion/to-oklch-string.md","filePath":"packages/color/reference/conversion/to-oklch-string.md","lastUpdated":1756905894000}'),h={name:"packages/color/reference/conversion/to-oklch-string.md"};function t(k,s,e,p,r,d){return n(),a("div",null,[...s[0]||(s[0]=[l(`<h1 id="tooklchstring" tabindex="-1">toOklchString <a class="header-anchor" href="#tooklchstring" aria-label="Permalink to “toOklchString”">​</a></h1><p>将任意合法的颜色字符串或颜色对象转换为现代 CSS 的 OKLCH 格式颜色字符串。</p><h2 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to “示例”">​</a></h2><h3 id="基本用法" tabindex="-1">基本用法 <a class="header-anchor" href="#基本用法" aria-label="Permalink to “基本用法”">​</a></h3><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes vitesse-light vitesse-dark" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">toOklchString</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">#FF0000</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// =&gt; &#39;oklch(0.628 0.258 29.234)&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">toOklchString</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">rgb(0, 255, 0)</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// =&gt; &#39;oklch(0.866 0.295 142.495)&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">toOklchString</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">({ </span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">h</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">240</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">, </span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">100</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">, </span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">l</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">50</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">, </span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">mode</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">hsl</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> })</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// =&gt; &#39;oklch(0.452 0.313 264.052)&#39;</span></span></code></pre></div><h3 id="处理透明度" tabindex="-1">处理透明度 <a class="header-anchor" href="#处理透明度" aria-label="Permalink to “处理透明度”">​</a></h3><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes vitesse-light vitesse-dark" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 当颜色包含透明度时，会使用现代 CSS 的斜杠语法输出</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">toOklchString</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">rgba(255, 0, 0, 0.5)</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// =&gt; &#39;oklch(0.628 0.258 29.234 / 0.5)&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 对于完全不透明的颜色，则不包含 alpha 部分</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">toOklchString</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">rgba(255, 0, 0, 1)</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// =&gt; &#39;oklch(0.628 0.258 29.234)&#39;</span></span></code></pre></div><h2 id="签名与说明" tabindex="-1">签名与说明 <a class="header-anchor" href="#签名与说明" aria-label="Permalink to “签名与说明”">​</a></h2><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes vitesse-light vitesse-dark" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * 将任意合法的颜色字符串或颜色对象转换为 OKLCH 颜色字符串。</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> *</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * OKLCH 是一种感知上更均匀的颜色空间，特别适合颜色操作和生成色阶。</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * 如果输入颜色包含透明度，函数会以 \`oklch(l c h / alpha)\` 的格式输出。</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> *</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">param</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> color</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> 任意合法的颜色字符串（如 &#39;#FF0000&#39;）或颜色对象。</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">returns</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> 一个 OKLCH 格式的颜色字符串，如果输入无效则返回 \`null\`。</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> */</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">export</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> toOklchString</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">color</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">string</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> | </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">EsdoraColor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> string</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> |</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> null</span></span></code></pre></div><h2 id="注意事项与边界情况" tabindex="-1">注意事项与边界情况 <a class="header-anchor" href="#注意事项与边界情况" aria-label="Permalink to “注意事项与边界情况”">​</a></h2><ul><li><strong>关于输出格式</strong>: 函数遵循现代 CSS Color Module Level 4 规范，使用空格分隔 L, C, H 值。当存在透明度时，使用 <code>/</code> 分隔符。</li><li><strong>关于无效输入</strong>: 当 <code>color</code> 参数为无效颜色字符串（如 <code>&#39;invalid-color&#39;</code>）、空字符串、<code>null</code>、<code>undefined</code> 或无法解析的对象时，函数将返回 <code>null</code>。</li><li><strong>关于灰度色</strong>: 对于没有色相的颜色（如黑、白、灰），其色度（Chroma）值接近于 <code>0</code>，色相（Hue）值在 CSS 字符串中可能会被表示为 <code>none</code> 或一个数值，例如 <code>oklch(1 0 none)</code>。</li><li><strong>输入灵活性</strong>: 函数内部使用强大的颜色解析器，可以接受多种格式的输入，包括但不限于 HEX, RGB, HSL, 颜色名称以及各类颜色对象。</li></ul><h2 id="相关链接" tabindex="-1">相关链接 <a class="header-anchor" href="#相关链接" aria-label="Permalink to “相关链接”">​</a></h2><ul><li><strong>源码</strong>: <a href="https://github.com/esdora-js/esdora/blob/main/packages/packages/color/src/conversion/to-oklch-string/index.ts" target="_blank" rel="noreferrer"><code>packages/packages/color/src/conversion/to-oklch-string/index.ts</code></a></li></ul>`,13)])])}const g=i(h,[["render",t]]);export{c as __pageData,g as default};

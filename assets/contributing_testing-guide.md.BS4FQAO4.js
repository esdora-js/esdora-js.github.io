import{_ as i,i as a,o as t,an as e}from"./chunks/framework.BAeZJ74p.js";const g=JSON.parse('{"title":"测试指南","description":"了解如何为 Dora Pocket 项目编写和运行单元测试，以及必须遵守的测试规范，以确保代码的健壮性和可靠性。","frontmatter":{"title":"测试指南","description":"了解如何为 Dora Pocket 项目编写和运行单元测试，以及必须遵守的测试规范，以确保代码的健壮性和可靠性。"},"headers":[],"relativePath":"contributing/testing-guide.md","filePath":"contributing/testing-guide.md","lastUpdated":1754549878000}'),n={name:"contributing/testing-guide.md"};function l(h,s,p,k,r,d){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="测试指南" tabindex="-1">测试指南 <a class="header-anchor" href="#测试指南" aria-label="Permalink to “测试指南”">​</a></h1><p>在 <code>Dora Pocket</code>，我们相信测试是保证每个“道具”都可靠、耐用的基石。我们力求达到 100% 的测试覆盖率，并要求所有新功能或 Bug 修复都必须附带相应的单元测试。</p><h2 id="测试框架" tabindex="-1">测试框架 <a class="header-anchor" href="#测试框架" aria-label="Permalink to “测试框架”">​</a></h2><p>我们使用 <a href="https://vitest.dev/" target="_blank" rel="noreferrer"><strong>Vitest</strong></a> 作为我们的测试框架，它拥有快速的性能和与 Vite 无缝集成的优秀体验。</p><h2 id="如何运行测试" tabindex="-1">如何运行测试 <a class="header-anchor" href="#如何运行测试" aria-label="Permalink to “如何运行测试”">​</a></h2><p>你可以使用以下 <code>pnpm</code> 脚本来运行测试：</p><ul><li><p><strong>运行全量测试</strong>:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes vitesse-light vitesse-dark" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">pnpm</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> test</span></span></code></pre></div><p>这个命令会运行项目中的所有测试用例。</p></li><li><p><strong>在监视模式下运行</strong>: 在开发过程中，使用监视模式会非常高效。它会自动重新运行与你修改文件相关的测试。</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes vitesse-light vitesse-dark" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">pnpm</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> test</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --watch</span></span></code></pre></div></li><li><p><strong>检查测试覆盖率</strong>:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes vitesse-light vitesse-dark" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">pnpm</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> coverage</span></span></code></pre></div><p>这个命令会在 <code>coverage/</code> 目录下生成一份详细的测试覆盖率报告，你可以在浏览器中打开 <code>index.html</code> 查看。</p></li></ul><h2 id="如何编写测试" tabindex="-1">如何编写测试 <a class="header-anchor" href="#如何编写测试" aria-label="Permalink to “如何编写测试”">​</a></h2><p>当你添加一个新功能或修复一个 Bug 时，请遵循以下步骤编写测试：</p><ol><li><p><strong>文件位置</strong>: 测试文件应与源文件放在<strong>同一目录</strong>下，并以 <strong><code>.test.ts</code></strong> 结尾。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes vitesse-light vitesse-dark" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span>- /packages/kit/src/function/clamp/</span></span>
<span class="line"><span>  - index.ts      (源文件)</span></span>
<span class="line"><span>  - index.test.ts (测试文件)</span></span></code></pre></div></li><li><p><strong>编写结构</strong>: 使用 <code>describe</code> 来组织测试套件，<code>it</code> (或 <code>test</code>) 来定义单个测试用例。</p></li><li><p><strong>测试内容</strong>: 一个好的测试用例应该覆盖：</p><ul><li><strong>常规情况</strong>: 测试函数在典型输入下的表现。</li><li><strong>边界情况</strong>: 测试临界值、<code>null</code>、<code>undefined</code>、空数组/对象等。</li><li><strong>异常情况</strong>: 测试无效输入是否能被优雅处理。</li></ul></li></ol><p><strong>示例 (<code>clamp.test.ts</code>):</strong></p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes vitesse-light vitesse-dark" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> describe</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> expect</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> it</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">vitest</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> clamp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">.</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">describe</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">clamp</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  it</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">should clamp a number within the bounds</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    expect</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">clamp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 10</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)).</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">toBe</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  })</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // ... 其他测试用例</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">})</span></span></code></pre></div><hr><h2 id="⚠️-必须遵守的测试规范" tabindex="-1">⚠️ 必须遵守的测试规范 <a class="header-anchor" href="#⚠️-必须遵守的测试规范" aria-label="Permalink to “⚠️ 必须遵守的测试规范”">​</a></h2><p>在提交 Pull Request 之前，请务必确保你的贡献满足以下所有要求：</p><h3 id="_1-更新导出文件快照" tabindex="-1">1. 更新导出文件快照 <a class="header-anchor" href="#_1-更新导出文件快照" aria-label="Permalink to “1. 更新导出文件快照”">​</a></h3><p><strong>如果你新增了一个导出的函数</strong>，你需要更新测试快照，以确保它被正确地包含在包的入口文件中。</p><p>运行以下命令来自动更新快照：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes vitesse-light vitesse-dark" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">pnpm</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> test</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -u</span></span></code></pre></div><h3 id="_2-在本地执行构建" tabindex="-1">2. 在本地执行构建 <a class="header-anchor" href="#_2-在本地执行构建" aria-label="Permalink to “2. 在本地执行构建”">​</a></h3><p>部分构建流程（如修改 <code>package.json</code> 的 <code>exports</code> 字段）是在 <code>pnpm run build</code> 过程中动态完成的。请在提交代码前，务必在本地成功执行一次构建。</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes vitesse-light vitesse-dark" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">pnpm</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> build</span></span></code></pre></div><h3 id="_3-测试覆盖率必须达到-100" tabindex="-1">3. 测试覆盖率必须达到 100% <a class="header-anchor" href="#_3-测试覆盖率必须达到-100" aria-label="Permalink to “3. 测试覆盖率必须达到 100%”">​</a></h3><p>你的 Pull Request <strong>必须</strong>保证你修改或新增的代码行、函数和分支都被单元测试完全覆盖。</p><ul><li>在本地运行 <code>pnpm coverage</code> 来检查你的覆盖率报告。</li><li>CI 流程会自动使用 <a href="https://app.codecov.io/gh/esdora-js/esdora" target="_blank" rel="noreferrer"><strong>Codecov</strong></a> 进行覆盖率检查，任何未达到 100% 的 PR 都将无法合并。</li><li>你可以访问我们的 <a href="https://github.com/esdora-js/esdora/blob/main/codecov.yml" target="_blank" rel="noreferrer">Codecov 配置</a>来了解具体的忽略规则和阈值设置。</li></ul>`,25)]))}const c=i(n,[["render",l]]);export{g as __pageData,c as default};

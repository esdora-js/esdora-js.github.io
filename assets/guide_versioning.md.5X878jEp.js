import{_ as a,b as n,i as s,o as i,j as o,an as d,y as r,g as l}from"./chunks/framework.rOq7ezfl.js";const u=JSON.parse('{"title":"版本与更新策略","description":"了解 Dora Pocket 的版本管理规范、发布周期和弃用策略，确保你在项目中能稳定、安全地使用我们的“道具”。","frontmatter":{"title":"版本与更新策略","description":"了解 Dora Pocket 的版本管理规范、发布周期和弃用策略，确保你在项目中能稳定、安全地使用我们的“道具”。"},"headers":[],"relativePath":"guide/versioning.md","filePath":"guide/versioning.md","lastUpdated":1754549878000}'),c={name:"guide/versioning.md"},p={id:"版本与更新策略",tabindex:"-1"};function g(h,e,m,_,P,f){const t=n("Badge");return i(),s("div",null,[o("h1",p,[e[0]||(e[0]=r("版本与更新策略 ",-1)),l(t,{type:"warning",text:"暂定"}),e[1]||(e[1]=r()),e[2]||(e[2]=o("a",{class:"header-anchor",href:"#版本与更新策略","aria-label":"Permalink to “版本与更新策略”"},"​",-1))]),e[3]||(e[3]=d('<p>我们深知，对于一个被依赖的库来说，稳定性和可预测性至关重要。本页面详细说明了 <code>Dora Pocket</code> 的版本管理规范，以帮助你理解我们的更新策略，并安全地管理你的项目依赖。</p><h2 id="语义化版本-semver" tabindex="-1">语义化版本 (SemVer) <a class="header-anchor" href="#语义化版本-semver" aria-label="Permalink to “语义化版本 (SemVer)”">​</a></h2><p><code>Dora Pocket</code> 的所有发布包（如 <code>@esdora/kit</code>）都严格遵循 <strong><a href="https://semver.org/lang/zh-CN/" target="_blank" rel="noreferrer">语义化版本 2.0.0</a></strong> 规范。</p><p>版本号格式为 <code>主版本号.次版本号.修订号</code> (例: <code>1.2.3</code>)：</p><ul><li><strong>主版本号 (MAJOR)</strong>: 当我们做出<strong>不兼容的 API 变更</strong>时，会增加主版本号。升级主版本可能需要你修改自己的代码。</li><li><strong>次版本号 (MINOR)</strong>: 当我们以<strong>向后兼容</strong>的方式<strong>添加新功能</strong>时，会增加次版本号。你可以安全地升级。</li><li><strong>修订号 (PATCH)</strong>: 当我们做出<strong>向后兼容</strong>的 <strong>Bug 修复</strong>时，会增加修订号。我们强烈建议你始终保持在最新的修订版本。</li></ul><h2 id="发布周期" tabindex="-1">发布周期 <a class="header-anchor" href="#发布周期" aria-label="Permalink to “发布周期”">​</a></h2><p>我们没有严格的固定发布周期。通常，当积累了一定数量的新功能或重要的 Bug 修复后，我们就会进行一次新的版本发布。</p><p>所有的变更都会记录在项目根目录的 <code>CHANGELOG.md</code> 文件中。</p><h2 id="弃用策略-deprecation-policy" tabindex="-1">弃用策略 (Deprecation Policy) <a class="header-anchor" href="#弃用策略-deprecation-policy" aria-label="Permalink to “弃用策略 (Deprecation Policy)”">​</a></h2><p>我们理解 API 的稳定性非常重要。因此，我们不会轻易地移除或破坏性地更改一个函数。</p><p>当我们计划弃用某个函数或 API 时，会遵循以下流程：</p><ol><li><strong>标记为 <code>@deprecated</code></strong>: 在至少一个次版本中，该函数将在 JSDoc 中被标记为 <code>@deprecated</code>，并在运行时（开发模式下）输出一个弃用警告。文档中也会明确指出其替代方案。</li><li><strong>移除</strong>: 在下一个主版本发布时，这个被标记为弃用的函数才会被正式移除。</li></ol><p>这为你提供了充足的时间来迁移你的代码。</p><h2 id="保持更新" tabindex="-1">保持更新 <a class="header-anchor" href="#保持更新" aria-label="Permalink to “保持更新”">​</a></h2><p>我们建议你使用 <code>pnpm up --latest @esdora/kit</code> 或类似的命令，定期将你的项目依赖更新到最新的<strong>次版本</strong>和<strong>修订版本</strong>，以获取最新的功能和 Bug 修复。</p>',15))])}const b=a(c,[["render",g]]);export{u as __pageData,b as default};

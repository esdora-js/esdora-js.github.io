import{_ as a,i as o,o as i,an as l}from"./chunks/framework.rOq7ezfl.js";const g=JSON.parse('{"title":"Codecov 配置说明","description":"","frontmatter":{},"headers":[],"relativePath":"codecov-setup.md","filePath":"codecov-setup.md","lastUpdated":1754299287000}'),s={name:"codecov-setup.md"};function c(r,e,n,t,d,h){return i(),o("div",null,e[0]||(e[0]=[l(`<h1 id="codecov-配置说明" tabindex="-1">Codecov 配置说明 <a class="header-anchor" href="#codecov-配置说明" aria-label="Permalink to “Codecov 配置说明”">​</a></h1><p>本项目使用 Codecov 进行代码覆盖率跟踪和报告。</p><h2 id="配置概览" tabindex="-1">配置概览 <a class="header-anchor" href="#配置概览" aria-label="Permalink to “配置概览”">​</a></h2><h3 id="自动发现机制" tabindex="-1">自动发现机制 <a class="header-anchor" href="#自动发现机制" aria-label="Permalink to “自动发现机制”">​</a></h3><ul><li>✅ 自动发现所有包的覆盖率文件</li><li>✅ 支持 monorepo 多包结构</li><li>✅ 无需手动添加新包路径</li></ul><h3 id="文件结构" tabindex="-1">文件结构 <a class="header-anchor" href="#文件结构" aria-label="Permalink to “文件结构”">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes vitesse-light vitesse-dark" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span>.github/workflows/ci.yml  # CI 配置，包含 Codecov 上传</span></span>
<span class="line"><span>codecov.yml              # Codecov 配置文件</span></span>
<span class="line"><span>packages/*/vitest.config.ts  # 各包的测试配置</span></span></code></pre></div><h2 id="工作流程" tabindex="-1">工作流程 <a class="header-anchor" href="#工作流程" aria-label="Permalink to “工作流程”">​</a></h2><ol><li><strong>测试运行</strong>: <code>pnpm run test:coverage</code></li><li><strong>文件发现</strong>: 自动查找 <code>./packages/*/coverage/coverage-final.json</code></li><li><strong>上传报告</strong>: 上传到 Codecov 进行分析</li></ol><h2 id="添加新包" tabindex="-1">添加新包 <a class="header-anchor" href="#添加新包" aria-label="Permalink to “添加新包”">​</a></h2><p>当添加新包时，只需要：</p><ol><li>创建包目录：<code>packages/your-new-package/</code></li><li>添加 vitest 配置，确保生成 <code>coverage/coverage-final.json</code></li><li>运行测试：CI 会自动发现并上传新包的覆盖率</li></ol><h2 id="覆盖率配置" tabindex="-1">覆盖率配置 <a class="header-anchor" href="#覆盖率配置" aria-label="Permalink to “覆盖率配置”">​</a></h2><ul><li><strong>目标范围</strong>: 70-100%</li><li><strong>项目阈值</strong>: 自动调整，允许 1% 波动</li><li><strong>补丁阈值</strong>: 自动调整，允许 1% 波动</li></ul><h2 id="忽略文件" tabindex="-1">忽略文件 <a class="header-anchor" href="#忽略文件" aria-label="Permalink to “忽略文件”">​</a></h2><p>以下文件类型被排除在覆盖率统计之外：</p><ul><li>测试文件 (<code>*.test.ts</code>, <code>*.spec.js</code> 等)</li><li>配置文件 (<code>*.config.*</code>)</li><li>类型定义 (<code>*.d.ts</code>)</li><li>构建产物 (<code>dist/</code>, <code>build/</code>)</li><li>文档和示例</li></ul><h2 id="故障排除" tabindex="-1">故障排除 <a class="header-anchor" href="#故障排除" aria-label="Permalink to “故障排除”">​</a></h2><p>如果覆盖率上传失败：</p><ol><li>检查测试是否成功运行</li><li>确认覆盖率文件是否生成：<code>packages/*/coverage/coverage-final.json</code></li><li>检查 CI 日志中的文件发现步骤</li><li>确认 <code>CODECOV_TOKEN</code> 密钥配置正确</li></ol><h2 id="技术细节" tabindex="-1">技术细节 <a class="header-anchor" href="#技术细节" aria-label="Permalink to “技术细节”">​</a></h2><ul><li><strong>上传工具</strong>: codecov/codecov-action@v5</li><li><strong>覆盖率格式</strong>: JSON (coverage-final.json)</li><li><strong>发现命令</strong>: <code>find ./packages -name &quot;coverage-final.json&quot; -type f</code></li><li><strong>失败处理</strong>: <code>fail_ci_if_error: false</code> (不阻塞 CI)</li></ul>`,22)]))}const f=a(s,[["render",c]]);export{g as __pageData,f as default};

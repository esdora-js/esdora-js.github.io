import{_ as o,i as r,o as t,an as a}from"./chunks/framework.CCWC7B3L.js";const h=JSON.parse('{"title":"函数设计与实现指南","description":"","frontmatter":{},"headers":[],"relativePath":"contributing/implementation-guide.md","filePath":"contributing/implementation-guide.md","lastUpdated":1756905894000}'),i={name:"contributing/implementation-guide.md"};function n(l,e,s,d,c,g){return t(),r("div",null,[...e[0]||(e[0]=[a('<h1 id="函数设计与实现指南" tabindex="-1">函数设计与实现指南 <a class="header-anchor" href="#函数设计与实现指南" aria-label="Permalink to “函数设计与实现指南”">​</a></h1><p>欢迎参与 <code>Dora Pocket</code> 的代码贡献！本指南旨在为所有函数的设计与实现提供一套统一的、高质量的标准。遵循这些规范，将有助于我们共同维护一个稳定、可预测且易于维护的代码库。</p><h2 id="核心设计哲学" tabindex="-1">核心设计哲学 <a class="header-anchor" href="#核心设计哲学" aria-label="Permalink to “核心设计哲学”">​</a></h2><p>在编写任何代码之前，请理解并遵循以下核心哲学：</p><ul><li><strong><code>@esdora/kit</code> 的纯粹性：</strong> <code>kit</code> 包是整个生态的基石，必须严格遵守<strong>零依赖</strong>原则。任何需要外部依赖的功能，都应考虑创建一个新的独立包。</li><li><strong>不重复造轮子（但有例外）：</strong> 优先考虑社区中经过战斗考验的优秀库。但如果所需功能非常小且稳定，可以考虑“供应商化 (Vendoring)”以保持 <code>kit</code> 的纯粹性。</li><li><strong>用户体验优先：</strong> API 的设计应力求直观、易用，并提供清晰的错误提示。</li></ul><h2 id="目录结构规范" tabindex="-1">目录结构规范 <a class="header-anchor" href="#目录结构规范" aria-label="Permalink to “目录结构规范”">​</a></h2><p>函数的存放位置取决于其<strong>稳定性</strong>和<strong>功能分类</strong>。</p><ul><li><strong>稳定函数：</strong> 存放于 <code>src/&lt;category&gt;/</code> 目录下。例如，一个稳定的函数工具应放在 <code>src/function/</code>。</li><li><strong>实验性函数：</strong> 必须存放于顶级的 <code>src/experimental/</code> 目录下。这能从物理上将它们与稳定代码隔离。</li></ul><h2 id="api-稳定性与生命周期管理" tabindex="-1">API 稳定性与生命周期管理 <a class="header-anchor" href="#api-稳定性与生命周期管理" aria-label="Permalink to “API 稳定性与生命周期管理”">​</a></h2><p>我们通过一套明确的机制来管理 API 的稳定性。</p><h4 id="_1-实验性-api-experimental" tabindex="-1">1. 实验性 API (<code>@experimental</code>) <a class="header-anchor" href="#_1-实验性-api-experimental" aria-label="Permalink to “1. 实验性 API (@experimental)”">​</a></h4><p>对于任何不确定或未来可能变更的 API，必须遵循以下所有规则：</p><ul><li><strong>存放位置：</strong> 必须位于 <code>src/experimental/</code> 目录下。</li><li><strong>命名约定：</strong> 函数名必须加上 <code>_unstable_</code> 前缀，例如 <code>_unstable_deepSort</code>。</li><li><strong>TSDoc 注释：</strong> 必须在 TSDoc 中添加 <code>@experimental</code> 标签，并明确说明其不稳定性。</li><li><strong>导出方式：</strong> 只能从专门的实验性入口（如 <code>@esdora/packages/kit/experimental</code>）导出。</li></ul><h4 id="_2-api-的-毕业" tabindex="-1">2. API 的“毕业” <a class="header-anchor" href="#_2-api-的-毕业" aria-label="Permalink to “2. API 的“毕业””">​</a></h4><p>当一个实验性 API 经过充分测试和社区反馈，准备成为稳定版时，需要执行以下步骤：</p><ol><li><strong>移动目录：</strong> 将其从 <code>src/experimental/</code> 移动到合适的稳定分类目录。</li><li><strong>重构代码：</strong> 移除函数名的 <code>_unstable_</code> 前缀。</li><li><strong>更新注释：</strong> 移除 <code>@experimental</code> 标签，并更新 TSDoc 为正式文档。</li><li><strong>更新导出：</strong> 将其从稳定入口（如 <code>@esdora/kit</code>）导出。</li><li><strong>记录变更：</strong> 在 <code>CHANGELOG</code> 中将此变动标记为新功能 (<code>feat</code>)。</li></ol><h2 id="tsdoc-注释规范" tabindex="-1">TSDoc 注释规范 <a class="header-anchor" href="#tsdoc-注释规范" aria-label="Permalink to “TSDoc 注释规范”">​</a></h2><p>高质量的 TSDoc 注释是代码不可或缺的一部分。</p><ul><li><strong>职责分离原则：</strong><ul><li><strong>简单函数：</strong> 在函数声明上方编写一个完整的、详尽的注释块。</li><li><strong>带重载的函数：</strong><ul><li>在<strong>每个重载签名</strong>上方，编写<strong>简洁</strong>的注释（摘要、<code>@param</code>, <code>@returns</code>），服务于 IDE 的智能提示。</li><li>在<strong>实现签名</strong>上方，编写<strong>最详尽</strong>的注释（<code>@remarks</code>, <code>@example</code> 等），作为技术底稿和文档源。</li></ul></li></ul></li><li><strong>语言：</strong> 所有 TSDoc 注释都推荐使用<strong>中文</strong>编写。</li><li><strong>示例为王 (<code>@example</code>)：</strong> 必须为公开的 API 提供清晰、可运行的示例。</li></ul><h2 id="依赖管理策略" tabindex="-1">依赖管理策略 <a class="header-anchor" href="#依赖管理策略" aria-label="Permalink to “依赖管理策略”">​</a></h2><ul><li><strong><code>@esdora/kit</code>:</strong> 严禁添加任何 <code>dependencies</code>。</li><li><strong>功能扩展：</strong> 当需要集成第三方库时（如颜色转换库 <code>color</code>），应创建一个新的、专注的独立包（如 <code>@esdora/color</code>），并在其中管理依赖。</li><li><strong>元包 <code>esdora</code>:</strong><ul><li><code>esdora</code> 包作为所有功能的统一入口。</li><li>它通过<strong>命名空间导出</strong>的方式 (<code>import * as kit from &#39;@esdora/kit&#39;</code>) 来聚合所有子包，以避免命名冲突并保持 API 结构清晰。</li></ul></li></ul>',21)])])}const m=o(i,[["render",n]]);export{h as __pageData,m as default};
